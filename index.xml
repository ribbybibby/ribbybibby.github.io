<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ROB BEST</title>
    <link>https://www.ribbybibby.me/</link>
    <description>Recent content on ROB BEST</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sat, 11 Sep 2021 11:00:51 +0100</lastBuildDate><atom:link href="https://www.ribbybibby.me/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Instrumenting k8s.io/client-go with metrics</title>
      <link>https://www.ribbybibby.me/posts/instrumenting-client-go/</link>
      <pubDate>Sat, 11 Sep 2021 11:00:51 +0100</pubDate>
      
      <guid>https://www.ribbybibby.me/posts/instrumenting-client-go/</guid>
      <description>The Kubernetes client-go package provides a really handy set of interfaces for instrumenting its REST client and workqueue packages.
This is something that I didn&amp;rsquo;t find highlighted or documented anywhere but I was sure must exist when I found myself thinking about the best way to implement metrics for my Kubernetes controllers.</description>
    </item>
    
    <item>
      <title>HOW TO: Unmarshal multiple yaml documents in Go</title>
      <link>https://www.ribbybibby.me/posts/multiple-yaml-documents/</link>
      <pubDate>Thu, 10 Dec 2020 18:03:51 +0100</pubDate>
      
      <guid>https://www.ribbybibby.me/posts/multiple-yaml-documents/</guid>
      <description>The README of the go-yaml package states:
 The yaml package supports most of YAML 1.1 and 1.2, including support for anchors, tags, map merging, etc. Multi-document unmarshalling is not yet implemented
 Nevertheless, multiple yaml documents can be parsed simply and reliably in Go and in this small post I&amp;rsquo;ll demonstrate how.</description>
    </item>
    
    <item>
      <title>HOW TO: Create a consistent runtime for Terraform with Docker and make</title>
      <link>https://www.ribbybibby.me/posts/consistent-runtime-for-terraform-with-docker-and-make/</link>
      <pubDate>Thu, 02 May 2019 18:18:51 +0100</pubDate>
      
      <guid>https://www.ribbybibby.me/posts/consistent-runtime-for-terraform-with-docker-and-make/</guid>
      <description>Inevitably, when you start using a shared Terraform code base between more than two or three people you have to start introducing measures to ensure consistency of approach across your team.
For instance, how do you make sure everyone is running the same version of Terraform? Or that theyâ€™re initializing the backend properly?</description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://www.ribbybibby.me/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.ribbybibby.me/about/</guid>
      <description>My name is Rob Best. I live in the Peak District and work remotely as a Site Reliability Engineer for Utility Warehouse.
I enjoy solving problems and building infrastructure platforms with a software engineering approach.
Here&amp;rsquo;s some projects I&amp;rsquo;ve contributed to:
 ssl_exporter s3_exporter vault-kube-cloud-credentials kube-applier vault-manifests  And some languages and technologies I work with regularly:</description>
    </item>
    
  </channel>
</rss>
